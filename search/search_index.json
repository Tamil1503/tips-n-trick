{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Tips-N-Trick BITS 20 Website! This website is to document all tips-n-trick related to Python, DSE course, exam preparation, AI-ML Libraries etc. Website Index Home Home - Website Home. Pure Python Python Quick Help - Python Tricks and Examples Python Best Practices - Python Best Practices AI-ML Libraries AI-ML Libraries - AI-ML Libraries Bookmarks Bookmarks - Bookmarks","title":"Welcome"},{"location":"#welcome-to-the-tips-n-trick-bits-20-website","text":"This website is to document all tips-n-trick related to Python, DSE course, exam preparation, AI-ML Libraries etc.","title":"Welcome to the Tips-N-Trick BITS 20 Website!"},{"location":"#website-index","text":"Home Home - Website Home. Pure Python Python Quick Help - Python Tricks and Examples Python Best Practices - Python Best Practices AI-ML Libraries AI-ML Libraries - AI-ML Libraries Bookmarks Bookmarks - Bookmarks","title":"Website Index"},{"location":"AIML/","text":"AIML","title":"AIML"},{"location":"AIML/#aiml","text":"","title":"AIML"},{"location":"Bookmarks/","text":"Bookmarks Python BookMarks Learn Python The Hard Way Powerful Python One-Liners Google Python Style Guide","title":"Bookmarks"},{"location":"Bookmarks/#bookmarks","text":"","title":"Bookmarks"},{"location":"Bookmarks/#python-bookmarks","text":"Learn Python The Hard Way Powerful Python One-Liners Google Python Style Guide","title":"Python BookMarks"},{"location":"HowToContribute/","text":"How to Contribute Steps to contribute: Fork tips-n-trick repository into your account on Github or create a branch. Clone your forked repository or checkout the newly created branch. Edit or Add New Page Test it Create a pull request for review to request merge on tips-n-trick repo. Thank you for your contribution! Detailed Steps Pre-Requisite Python3.6+ Make Install virtualenv python3 -m pip install virtualenv Run Make file to create virtualenv make install Testing Locally Run webserver locally and test your changes. make test Open Website in http://127.0.0.1:8000/ You can have webserver running while make changes to files. Changes are automatically reloaded. Ready for PR Once all things verified, please send a PR.","title":"How to Contribute"},{"location":"HowToContribute/#how-to-contribute","text":"Steps to contribute: Fork tips-n-trick repository into your account on Github or create a branch. Clone your forked repository or checkout the newly created branch. Edit or Add New Page Test it Create a pull request for review to request merge on tips-n-trick repo. Thank you for your contribution!","title":"How to Contribute"},{"location":"HowToContribute/#detailed-steps","text":"","title":"Detailed Steps"},{"location":"HowToContribute/#pre-requisite","text":"Python3.6+ Make Install virtualenv python3 -m pip install virtualenv Run Make file to create virtualenv make install","title":"Pre-Requisite"},{"location":"HowToContribute/#testing-locally","text":"Run webserver locally and test your changes. make test Open Website in http://127.0.0.1:8000/ You can have webserver running while make changes to files. Changes are automatically reloaded.","title":"Testing Locally"},{"location":"HowToContribute/#ready-for-pr","text":"Once all things verified, please send a PR.","title":"Ready for PR"},{"location":"PythonBestPractices/","text":"Python Best Practices","title":"Python Best Practices"},{"location":"PythonBestPractices/#python-best-practices","text":"","title":"Python Best Practices"},{"location":"PythonQuickHelp/","text":"Python Quick Help Sort a dict sorted ( dict_name , key = lambda row : ( row [ dob ], row [ salary ], row [ height ]), reverse = False ) where dict_name is name of the dictionary and sorting filter is applied on dob , then salary , then height Make api calls using passphrase for PEM file with Python SSLContext import requests import ssl from ssl import SSLContext import http import json context = ssl . SSLContext ( ssl . PROTOCOL_TLSv1_2 ) context . load_cert_chain ( certfile = path to pem file containing private key , password = ****** ) context . load_verify_locations ( cafile = path to ca certfile ) context . verify_mode = ssl . CERT_REQUIRED context . check_hostname = True connection = http . client . HTTPSConnection ( www.google.com , 443 , context = context ) connection . request ( GET , /api path/ ) #e.g: connection.request( GET , /applications/ ) response = connection . getresponse () data = response . read () . decode ( utf-8 ) print ( data ) json_obj = json . loads ( data ) print ( json_obj ) connection . close () Catch all Exceptions of a Module Considering requests as module and if we want to catch all possible exception of this module with out using broader except: , please use below code snippet. # This will inspect and get all members of Exception class in request module import inspect # import the module which you want to use. Example: requests import requests # Get all requests exception class from requests which are subclass of Exception exception_types = [ obj for name , obj in inspect . getmembers ( jsonschema . exceptions ) if inspect . isclass ( obj ) and issubclass ( obj , Exception )] try : requests . get ( url ) except Exception as e : if any ( issubclass ( e . __class__ , lv ) for lv in exception_types ): print ( str ( e )) else : print ( Not an requests exceptions. ) raise Fix [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (ssl.c:726) Please add below to bypass import ssl ssl . _create_default_https_context = ssl . _create_unverified_context or update certifi In Mac, to update certifi, run below commands [Applicable if Python was installed using official package from python.org] /Applications/Python\\ 3.6/Install\\ Certificates.command /Applications/Python\\ 2.7/Install\\ Certificates.command","title":"Python Quick Help"},{"location":"PythonQuickHelp/#python-quick-help","text":"","title":"Python Quick Help"},{"location":"PythonQuickHelp/#sort-a-dict","text":"sorted ( dict_name , key = lambda row : ( row [ dob ], row [ salary ], row [ height ]), reverse = False ) where dict_name is name of the dictionary and sorting filter is applied on dob , then salary , then height","title":"Sort a dict"},{"location":"PythonQuickHelp/#make-api-calls-using-passphrase-for-pem-file-with-python-sslcontext","text":"import requests import ssl from ssl import SSLContext import http import json context = ssl . SSLContext ( ssl . PROTOCOL_TLSv1_2 ) context . load_cert_chain ( certfile = path to pem file containing private key , password = ****** ) context . load_verify_locations ( cafile = path to ca certfile ) context . verify_mode = ssl . CERT_REQUIRED context . check_hostname = True connection = http . client . HTTPSConnection ( www.google.com , 443 , context = context ) connection . request ( GET , /api path/ ) #e.g: connection.request( GET , /applications/ ) response = connection . getresponse () data = response . read () . decode ( utf-8 ) print ( data ) json_obj = json . loads ( data ) print ( json_obj ) connection . close ()","title":"Make api calls using passphrase for PEM file with Python SSLContext"},{"location":"PythonQuickHelp/#catch-all-exceptions-of-a-module","text":"Considering requests as module and if we want to catch all possible exception of this module with out using broader except: , please use below code snippet. # This will inspect and get all members of Exception class in request module import inspect # import the module which you want to use. Example: requests import requests # Get all requests exception class from requests which are subclass of Exception exception_types = [ obj for name , obj in inspect . getmembers ( jsonschema . exceptions ) if inspect . isclass ( obj ) and issubclass ( obj , Exception )] try : requests . get ( url ) except Exception as e : if any ( issubclass ( e . __class__ , lv ) for lv in exception_types ): print ( str ( e )) else : print ( Not an requests exceptions. ) raise","title":"Catch all Exceptions of a Module"},{"location":"PythonQuickHelp/#fix-ssl-certificate_verify_failed-certificate-verify-failed-sslc726","text":"Please add below to bypass import ssl ssl . _create_default_https_context = ssl . _create_unverified_context or update certifi In Mac, to update certifi, run below commands [Applicable if Python was installed using official package from python.org] /Applications/Python\\ 3.6/Install\\ Certificates.command /Applications/Python\\ 2.7/Install\\ Certificates.command","title":"Fix [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (ssl.c:726)"}]}